5. 100에서 200까지 조절할 수 있는 수평 슬라이더와 레이블을 하나 만들고 사용자가 슬라이더를 움직이면 레이블 컴포턴트에 수치로 보여주는 스윙 응용프로그램을 작성하라.

import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;

public class JSliderPracticeFrame extends JFrame {
	private JSlider slider = new JSlider(100,200,150);
	private JLabel label = new JLabel("        ");
	public JSliderPracticeFrame() {
		super("JSlider Practice Frame");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new FlowLayout());
		c.add(slider);
		c.add(label);

		// 슬라이더의 속성 설정
		slider.setMajorTickSpacing(20);
		slider.setPaintLabels(true);
		slider.setPaintTicks(true);

		// 출력 레이블의 속성 설정
		label.setHorizontalAlignment(JLabel.CENTER);
		label.setOpaque(true);
		label.setBackground(Color.GREEN);
		label.setText(Integer.toString(slider.getValue()));

		// 슬라이더에 Change 리스너 작성
		slider.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent e) {
				JSlider s = (JSlider)e.getSource();
				label.setText(Integer.toString(s.getValue()));
			}
		});

		setSize(300,150);
		setVisible(true);
	}
	public static void main(String[] args) {
		new JSliderPracticeFrame();
	}
}

10. 흩뿌려진 단어들을 조합하여 한 줄의 텍스트를 완성하는 게임을 작성하라. 여러 줄의 텍스틀 미리 준비해두고, "Next Text"버튼을 클릭하면 이 중에서 한줄을 선택한 후 단어를 분리하여 화면의 랜덤한 위치에 출력한다. 사용자는 단어를 순서대로 클기하여 문장을 완성한다. 사용자가 단어를 클릭할 때마다 하단에 완성된 문장이 보이고, 사용자가 문장을 바르게 완성하면 게임이 끝난다. 13장의 스레드를 학습한 다음 타이머를 붙여 시간을 재면 재미있는 게임이 될 수있다.

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class WordGame extends JFrame {
    private String[] sentences = {
            "I love programming",
            "Java is powerful",
            "Swing makes GUIs",
            "Practice makes perfect"
    };
    private ArrayList<String> words;
    private String currentSentence;
    private StringBuilder userSentence;
    private JLabel completedSentenceLabel;

    public WordGame() {
        setTitle("Word Game");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 400);
        setLayout(null);
        setLocationRelativeTo(null); // 화면 중앙에 표시

        // "Next Text" 버튼
        JButton nextButton = new JButton("Next Text");
        nextButton.setBounds(10, 10, 120, 30);
        nextButton.addActionListener(e -> startNewGame());
        add(nextButton);

        // 완료된 문장을 보여주는 라벨
        completedSentenceLabel = new JLabel("Click words to form a sentence");
        completedSentenceLabel.setBounds(10, 50, 580, 30);
        completedSentenceLabel.setFont(new Font("Arial", Font.BOLD, 14));
        add(completedSentenceLabel);

        setFocusable(true);
        setVisible(true);
    }

    private void startNewGame() {
        // 새 문장을 선택
        currentSentence = sentences[new Random().nextInt(sentences.length)];
        words = new ArrayList<>();
        Collections.addAll(words, currentSentence.split(" "));
        Collections.shuffle(words);

        // 사용자 입력 초기화
        userSentence = new StringBuilder();

        // 기존 단어 컴포넌트 제거
        getContentPane().removeAll();
        repaint();

        // "Next Text" 버튼 다시 추가
        JButton nextButton = new JButton("Next Text");
        nextButton.setBounds(10, 10, 120, 30);
        nextButton.addActionListener(e -> startNewGame());
        add(nextButton);

        // 완료된 문장 라벨 다시 추가
        add(completedSentenceLabel);

        // 단어 버튼 추가
        Random rand = new Random();
        for (String word : words) {
            JButton wordButton = new JButton(word);
            wordButton.setBounds(rand.nextInt(500), rand.nextInt(200) + 100, 100, 30);
            wordButton.addActionListener(e -> handleWordClick(word, wordButton));
            add(wordButton);
        }

        revalidate();
        repaint();
    }

    private void handleWordClick(String word, JButton button) {
        // 버튼 클릭 시 문장에 추가
        userSentence.append(word).append(" ");
        completedSentenceLabel.setText(userSentence.toString().trim());

        // 버튼 비활성화
        button.setEnabled(false);

        // 문장이 완성되었는지 확인
        if (userSentence.toString().trim().equals(currentSentence)) {
            JOptionPane.showMessageDialog(this, "Correct! You completed the sentence.");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(WordGame::new);
    }
}
