1. "파일", "편집", "보기", "입력" 등의 4가지 메뉴를 가진 스윙 프로그램을 작성하라.
  "보기" 메뉴에만 "화면확대", "쪽윤곽"의 2개의 메뉴아이템이 있다.

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MenuExample extends JFrame {

    public MenuExample() {
        setTitle("메뉴 예제");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // 메뉴바 생성
        JMenuBar menuBar = new JMenuBar();

        // "파일" 메뉴 생성
        JMenu fileMenu = new JMenu("파일");
        JMenuItem fileNew = new JMenuItem("새 파일");
        JMenuItem fileOpen = new JMenuItem("파일 열기");
        JMenuItem fileExit = new JMenuItem("종료");

        fileMenu.add(fileNew);
        fileMenu.add(fileOpen);
        fileMenu.addSeparator(); // 메뉴 항목 구분선
        fileMenu.add(fileExit);

        // "편집" 메뉴 생성
        JMenu editMenu = new JMenu("편집");
        JMenuItem editCopy = new JMenuItem("복사");
        JMenuItem editPaste = new JMenuItem("붙여넣기");

        editMenu.add(editCopy);
        editMenu.add(editPaste);

        // "보기" 메뉴 생성
        JMenu viewMenu = new JMenu("보기");
        JMenuItem zoomIn = new JMenuItem("화면확대");
        JMenuItem outline = new JMenuItem("쪽윤곽");

        viewMenu.add(zoomIn);
        viewMenu.add(outline);

        // "입력" 메뉴 생성
        JMenu inputMenu = new JMenu("입력");
        JMenuItem inputText = new JMenuItem("입력 텍스트");

        inputMenu.add(inputText);

        // 메뉴바에 각 메뉴 추가
        menuBar.add(fileMenu);
        menuBar.add(editMenu);
        menuBar.add(viewMenu);
        menuBar.add(inputMenu);

        // 메뉴바를 프레임에 설정
        setJMenuBar(menuBar);

        // 메뉴 아이템에 액션 리스너 추가
        fileExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0); // 프로그램 종료
            }
        });

        zoomIn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(MenuExample.this, "화면이 확대되었습니다.");
            }
        });

        outline.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(MenuExample.this, "쪽 윤곽이 활성화되었습니다.");
            }
        });

        // UI 표시
        setLocationRelativeTo(null); // 화면 중앙에 표시
        setVisible(true);
    }

    public static void main(String[] args) {
        new MenuExample();
    }
}

2. "파일" 메뉴에 "열기" 메뉴아이템을 하나 만든다. 이 메뉴아이템을 선택하면 파일 열기 다이얼로그를 출력하고 사용자가 JPG 이미지 파일을 선택하면 이 이미지를 프레임의 바탕화면 전체(컨텐츠팬)에 그리는 스윙 응용프로그램을 작성하라. 이미지를 그리기 위해서 JLabel을 이용하지 말고 Graphics의 drawImage()메소드를 이용하라.

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

public class ImageDisplayApp extends JFrame {

    private BufferedImage image;

    public ImageDisplayApp() {
        setTitle("이미지 파일 열기");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // 메뉴바 생성
        JMenuBar menuBar = new JMenuBar();

        // "파일" 메뉴 생성
        JMenu fileMenu = new JMenu("파일");
        JMenuItem openItem = new JMenuItem("열기");

        fileMenu.add(openItem);
        menuBar.add(fileMenu);

        // 메뉴바를 프레임에 설정
        setJMenuBar(menuBar);

        // "열기" 메뉴 아이템에 액션 리스너 추가
        openItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                openImageFile();
            }
        });

        setLocationRelativeTo(null); // 화면 중앙에 표시
        setVisible(true);
    }

    // 파일 열기 다이얼로그에서 이미지 파일을 선택하는 메소드
    private void openImageFile() {
        // 파일 선택 다이얼로그
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("이미지 파일", "jpg", "jpeg"));

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                // 선택된 파일을 BufferedImage로 읽어오기
                image = ImageIO.read(file);
                repaint(); // 이미지가 변경되면 다시 그리기
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "이미지 파일을 열 수 없습니다.", "오류", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // paint 메소드 오버라이드하여 이미지를 그리기
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (image != null) {
            // 이미지를 프레임의 바탕화면에 맞게 그린다.
            g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
        }
    }

    public static void main(String[] args) {
        new ImageDisplayApp();
    }
}


3. 투바를 만들고 "종료" 버튼을 하나 단다. 이 버튼을 선택하면 JOptionPane을 이용하여 YES_N0_OPTION에 "정말 종료하시겠습니까?" 메시지를  출력하는 확인 다이얼로그를 출력하라. 그리고 사용자가 "예(Y)"로 답한 경우에만 응용프로그램을 종료하는 스윙 응용프로그램을 작성하라

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ToolbarExitApp extends JFrame {

    public ToolbarExitApp() {
        setTitle("툴바 종료 예제");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); // 기본 종료 동작 설정
        setLocationRelativeTo(null); // 화면 중앙에 표시

        // 툴바 생성
        JToolBar toolBar = new JToolBar();
        JButton exitButton = new JButton("종료");

        // 툴바에 종료 버튼 추가
        toolBar.add(exitButton);

        // 툴바를 프레임 상단에 추가
        add(toolBar, BorderLayout.NORTH);

        // 종료 버튼 클릭 시 확인 다이얼로그 띄우기
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int option = JOptionPane.showConfirmDialog(
                        ToolbarExitApp.this,
                        "정말 종료하시겠습니까?",
                        "종료 확인",
                        JOptionPane.YES_NO_OPTION
                );

                if (option == JOptionPane.YES_OPTION) {
                    System.exit(0); // 예를 선택하면 프로그램 종료
                }
            }
        });

        setVisible(true); // 프레임 보이기
    }

    public static void main(String[] args) {
        new ToolbarExitApp();
    }
}

4.툴바에 그림과 같이 학번을 입력하는 텍스트필드 컴포넌트를 삽입하고 툴바를 프레임의 하단에 부착하라. 이 텍스트필드 컴포넌트에는 오직 숫자만이 입력되도록 하기 위해 사용자가 숫자가 아닌 키를 입력하면 그림과 같은 경고 메시지를 가진 경고 창을 출력하도록 하라. 그림에서는 20170304 뒤에 f 키가 입력된 경우 출력되는 경고 창을 보여준다.

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class StudentNumberApp extends JFrame {

    public StudentNumberApp() {
        setTitle("학번 입력 프로그램");
        setSize(400, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // 화면 중앙에 표시

        // 툴바 생성
        JToolBar toolBar = new JToolBar();

        // 학번 입력을 위한 텍스트 필드 생성
        JTextField studentNumberField = new JTextField(20);
        toolBar.add(new JLabel("학번: ")); // 레이블 추가
        toolBar.add(studentNumberField); // 텍스트 필드 추가

        // 툴바를 프레임 하단에 배치
        add(toolBar, BorderLayout.SOUTH);

        // 텍스트 필드에 키 입력 제한 (숫자만 입력 가능)
        studentNumberField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();

                // 숫자만 입력 허용
                if (!Character.isDigit(c)) {
                    e.consume(); // 숫자가 아닌 입력은 무시
                    JOptionPane.showMessageDialog(
                            StudentNumberApp.this,
                            "숫자만 입력 가능합니다.",
                            "입력 오류",
                            JOptionPane.WARNING_MESSAGE
                    );
                }
            }
        });

        setVisible(true); // 프레임 보이기
    }

    public static void main(String[] args) {
        new StudentNumberApp();
    }
}


5.프로그램이 시작되면 바로 오디오를 재생하라. 그리고 마우스가 프로그램을 벗어나면 연주를 일시 중단시키고, 다시 마우스가 프로그램으로 올라오면 연주를 계속하도록 하라.

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.sound.sampled.*;
import javax.swing.*;

public class AudioStartAndStopFrame extends JFrame {
	private Clip clip = null;
	private AudioInputStream audioStream = null;
	private JLabel msgLabel = new JLabel("");
	
	public AudioStartAndStopFrame() {
		super("오디오 시작 중단 연습");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();

		c.setLayout(new FlowLayout());
		msgLabel.setFont(new Font("Gothic", Font.PLAIN, 15));
		c.add(msgLabel);
		setSize(300,150);
		setVisible(true);
		
		playAudio("audio\\hiphop.wav");
		msgLabel.setText("audio\\hiphop.wav 연주 중");
		
		c.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				msgLabel.setText("audio\\hiphop.wav 연주 계속");
				clip.start(); // 중단된 위치에서부터 시작				
			}
			
		 	@Override
			public void mouseExited(MouseEvent e) {
				msgLabel.setText("audio\\hiphop.wav 연주 일시 중단");
				clip.stop(); // 중단된 위치에서부터 시작				
			}

		});
	}
	
	private void playAudio(String pathName) {
		try {
			File audioFile = new File(pathName); // 오디오 파일의 경로명
			audioStream = AudioSystem.getAudioInputStream(audioFile); // 오디오 파일로부터
			
			clip = AudioSystem.getClip(); // 비어있는 오디오 클립 만들기
			clip.open(audioStream); // 재생할 오디오 스트림 열기
			clip.start(); // 재생 시작
		}
		catch (LineUnavailableException e) { e.printStackTrace(); }
		catch (UnsupportedAudioFileException e) { e.printStackTrace(); }
		catch (IOException e) { e.printStackTrace(); }
	}

	static public void main(String[] arg) {
		new AudioStartAndStopFrame();
	}
}

 

6."Calculate" 버튼과 레이블을 가진 프레임을 작성하라. JDialog를 상속받아 CalcDialog 다이얼로그를 다음 그리과 같이 구현하고, "Calculate" 버튼을 클릭하면 CalcDialog가 출력되도록 하라. 사용자로부터 두 정수를 입력받고 "Add" 버튼을 클릭하면 그 결과 값이 레이블에 출력되도록 하라.CalcDialog는 모달 다이얼로그로 만들어라.


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class CalculatorApp extends JFrame {
    private JLabel resultLabel;

    public CalculatorApp() {
        setTitle("Calculator");
        setSize(400, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // 화면 중앙에 표시

        // 레이아웃 설정
        setLayout(new FlowLayout());

        // 레이블 추가
        resultLabel = new JLabel("Result: ");
        add(resultLabel);

        // "Calculate" 버튼 추가
        JButton calculateButton = new JButton("Calculate");
        add(calculateButton);

        // "Calculate" 버튼 클릭 이벤트
        calculateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // CalcDialog 다이얼로그 생성
                CalcDialog dialog = new CalcDialog(CalculatorApp.this);
                dialog.setVisible(true);
            }
        });
    }

    // 메인 함수
    public static void main(String[] args) {
        new CalculatorApp().setVisible(true);
    }

    // CalcDialog 다이얼로그 클래스
    class CalcDialog extends JDialog {
        private JTextField num1Field;
        private JTextField num2Field;
        private JButton addButton;

        public CalcDialog(JFrame parent) {
            super(parent, "Calculate", true); // 모달 다이얼로그
            setSize(300, 200);
            setLocationRelativeTo(parent); // 부모 프레임 중앙에 표시

            // 레이아웃 설정
            setLayout(new FlowLayout());

            // 두 숫자 입력 필드와 버튼 설정
            num1Field = new JTextField(10);
            num2Field = new JTextField(10);
            addButton = new JButton("Add");

            // 컴포넌트 추가
            add(new JLabel("Enter number 1: "));
            add(num1Field);
            add(new JLabel("Enter number 2: "));
            add(num2Field);
            add(addButton);

            // "Add" 버튼 클릭 이벤트 처리
            addButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        // 두 숫자 입력 받기
                        int num1 = Integer.parseInt(num1Field.getText());
                        int num2 = Integer.parseInt(num2Field.getText());

                        // 결과 계산
                        int sum = num1 + num2;

                        // 결과 레이블에 출력
                        resultLabel.setText("Result: " + sum);

                        // 다이얼로그 닫기
                        dispose();
                    } catch (NumberFormatException ex) {
                        // 입력값이 숫자가 아닐 경우
                        JOptionPane.showMessageDialog(CalcDialog.this,
                                "Please enter valid integers.",
                                "Input Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        }
    }
}



7. 메뉴를 이용하여 오디오를 연주를 프로그램을 작성하라. "오디오" 메뉴에 "연주"와 "종료"
 메뉴아이템을 두고, "연주" 메뉴아이템이 선택되면 JFileChooser를 이용하여 wav 파일을 선택하여 연주를 시작하고, "종료" 메뉴아이템이 선택되면 연주를 종료한다.


import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class AudioMenuFrame extends JFrame {
	private JFileChooser chooser = null;
	private Clip clip = null;
	private AudioInputStream audioStream = null;
	private JLabel msgLabel = new JLabel("오디오 파일을 선택하세요");
	
	public AudioMenuFrame() {
		super("오디오 파일을 찾아 연주/종료 제어");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new FlowLayout());
		msgLabel.setFont(new Font("Gothic", Font.PLAIN, 15));
		msgLabel.setHorizontalAlignment(JLabel.CENTER);
		c.add(msgLabel);
		
		createMenu();

		setSize(450,150);
		setVisible(true);
	}
	
	private void createMenu() {
		JMenu audioMenu = new JMenu("오디오");
		JMenuItem playItem = new JMenuItem("연주");
		audioMenu.add(playItem);

		JMenuItem stopItem = new JMenuItem("종료");
		audioMenu.add(stopItem);
	
		JMenuBar mb = new JMenuBar();
		mb.add(audioMenu);
		setJMenuBar(mb);
		
		playItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String filePath = chooseFile();
				if(filePath == null)
					return; // 파일이 선택되지 않았음
				
				if(clip != null && clip.isActive())
					clip.close();

				playAudio(filePath);
				msgLabel.setText(new File(filePath).getName() + " 를 연주하고 있습니다.");
			}
		});
		
		stopItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if(clip != null && clip.isActive()) {
					clip.close();
					msgLabel.setText("연주를 종료합니다.");					
				}
			}
		});

	}
	
	private String chooseFile() {
		if(chooser == null) // 처음이면, 아니면 이전에 만든 chooser 이용
			chooser= new JFileChooser();
		
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
			        "Audio Files(wav,au, mid, rmf)", "wav", "au", "mid",  "rmf");
	    chooser.setFileFilter(filter);
		int ret = chooser.showOpenDialog(AudioMenuFrame.this);
		if(ret != JFileChooser.APPROVE_OPTION) {
			JOptionPane.showMessageDialog(AudioMenuFrame.this, "파일을 선택하지 않았습니다", 
						"경고", JOptionPane.WARNING_MESSAGE);
			return null;
		}
		String filePath = chooser.getSelectedFile().getPath();
		return filePath;
	}
	
	private void playAudio(String pathName) {
		try {
			File audioFile = new File(pathName); // 오디오 파일의 경로명
			audioStream = AudioSystem.getAudioInputStream(audioFile); // 오디오 파일로부터
			
			clip = AudioSystem.getClip(); // 비어있는 오디오 클립 만들기
			clip.addLineListener(new MyLineListener());
			clip.open(audioStream); // 재생할 오디오 스트림 열기
			clip.start(); // 재생 시작
		}
		catch (LineUnavailableException e) { e.printStackTrace(); }
		catch (UnsupportedAudioFileException e) { e.printStackTrace(); }
		catch (IOException e) { e.printStackTrace(); }
	}
	
	class MyLineListener implements LineListener {
		@Override
		public void update(LineEvent e) {
			if (e.getType() == LineEvent.Type.STOP) { // clip.stop()이 호출되거나 재생이 끝났을 때
				try {
					audioStream.close(); // 현재 연주되는 오디오 스트림 닫기
					msgLabel.setText("연주를 종료하였습니다.");			
				} catch (IOException e1) {
					e1.printStackTrace();		
				}
            }
		}
	}
	static public void main(String[] arg) {
		new AudioMenuFrame();
	}
	
	
}

